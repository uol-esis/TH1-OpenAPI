openapi: 3.0.3
info:
  description: TH1
  title: TH1
  version: 1.19.0
servers:
- description: Local server
  url: "http://localhost:{port}/api/v1"
  variables:
    port:
      default: "8080"
- description: Dev server
  url: "http://pg-doener-dev.virt.uni-oldenburg.de:{port}/api/v1"
  variables:
    port:
      default: "8080"
- description: Prod server
  url: "http://pg-doener-prod.virt.uni-oldenburg.de:{port}/api/v1"
  variables:
    port:
      default: "8080"
security:
- BasicAuth: []
paths:
  /table-structures:
    get:
      operationId: getTableStructures
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/tableStructureSummary'
                type: array
          description: OK
        "401":
          description: Unauthorized
      summary: Get all table structures
    post:
      operationId: createTableStructure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tableStructure'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                format: int64
                minimum: 1
                type: integer
          description: Created
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Create a new table structure
  /table-structures/{id}:
    delete:
      operationId: deleteTableStructure
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
      summary: Delete table structure by id
    get:
      operationId: getTableStructure
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tableStructure'
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
      summary: Get a table structure by id
  /table-structures/generate:
    post:
      operationId: generateTableStructure
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/generateTableStructure_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tableStructureGenerationResponse'
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Generate a tableStructure and return the result as a json
  /converter/{tableStructureId}:
    post:
      operationId: convertTable
      parameters:
      - in: path
        name: tableStructureId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - in: query
        name: mode
        required: false
        schema:
          default: CREATE
          enum:
          - CREATE
          - EXTEND
          - REPLACE
          - RESTRUCTURE
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/convertTable_request'
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
      summary: Convert a table and save it to the database
  /converter/preview:
    post:
      operationId: previewConvertTable
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 10
          minimum: 1
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/previewConvertTable_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    type: string
                  type: array
                type: array
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Convert a table and return a preview of the result
  /converter/file:
    post:
      operationId: fileConvertTable
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/previewConvertTable_request'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Convert a table and return the result as a file
  /feedback:
    post:
      operationId: submitFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedback'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                format: uuid
                type: string
          description: Created
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Submit feedback
components:
  schemas:
    tableStructure:
      description: |
        This is a table structure.
        It contains all structures and their information needed to convert a table.
        The properties endRow and endColumn can be used to cut off rows and columns at the end of the table.
      example:
        id: 1
        name: Table structure 1
        structures:
        - name: Fill Header
          description: Fills empty cells in the header
          converterType: FILL_EMPTY_ROW
          rowIndex:
          - 0
          - 1
        - name: Resolve Grouped Header
          description: Resolves the grouped header
          converterType: REMOVE_GROUPED_HEADER
          rowIndex:
          - 0
          - 1
          columnIndex:
          - 0
          startRow: 3
          startColumn: 0
      properties:
        id:
          description: The ID of the table structure.
          format: int64
          minimum: 1
          type: integer
        name:
          description: |
            The name of the table structure.
            This is an arbitrary string.
          example: Table structure 1
          minLength: 1
          type: string
        structures:
          description: The list of structures in the table structure.
          items:
            $ref: '#/components/schemas/structure'
          minItems: 0
          type: array
        endRow:
          description: |
            The last zero-based row index of the table.
            All rows after this index are removed.
            If this property is not set, all rows are kept.
          minimum: 1
          type: integer
        endColumn:
          description: |
            The last zero-based column index of the table.
            All columns after this index are removed.
            If this property is not set, all columns are kept.
          minimum: 1
          type: integer
      required:
      - delimiter
      - name
      - structures
      type: object
    structure:
      description: |
        This is the base for all converter structures.
        The converterType is used as a discriminator to determine the specific structure.
      discriminator:
        mapping:
          REMOVE_GROUPED_HEADER: '#/components/schemas/removeGroupedHeaderStructure'
          FILL_EMPTY_ROW: '#/components/schemas/fillEmptyRowStructure'
          FILL_EMPTY_COLUMN: '#/components/schemas/fillEmptyColumnStructure'
          REMOVE_COLUMN_BY_INDEX: '#/components/schemas/removeColumnByIndexStructure'
          REMOVE_ROW_BY_INDEX: '#/components/schemas/removeRowByIndexStructure'
          ADD_HEADER_NAME: '#/components/schemas/addHeaderNameStructure'
          REMOVE_HEADER: '#/components/schemas/removeHeaderStructure'
          REMOVE_FOOTER: '#/components/schemas/removeFooterStructure'
          REPLACE_ENTRIES: '#/components/schemas/replaceEntriesStructure'
          SPLIT_ROW: '#/components/schemas/splitRowStructure'
          REMOVE_INVALID_ROWS: '#/components/schemas/removeInvalidRowsStructure'
          REMOVE_TRAILING_COLUMN: '#/components/schemas/removeTrailingColumnStructure'
          REMOVE_LEADING_COLUMN: '#/components/schemas/removeLeadingColumnStructure'
          MERGE_COLUMNS: '#/components/schemas/mergeColumnsStructure'
        propertyName: converterType
      example:
        name: Resolve Grouped Header
        description: Resolves the grouped header
        converterType: REMOVE_GROUPED_HEADER
        rowIndex:
        - 0
        - 1
        columnIndex:
        - 0
        startRow: 3
        startColumn: 0
      oneOf:
      - $ref: '#/components/schemas/removeRowByIndexStructure'
      - $ref: '#/components/schemas/removeColumnByIndexStructure'
      - $ref: '#/components/schemas/removeGroupedHeaderStructure'
      - $ref: '#/components/schemas/fillEmptyRowStructure'
      - $ref: '#/components/schemas/fillEmptyColumnStructure'
      - $ref: '#/components/schemas/addHeaderNameStructure'
      - $ref: '#/components/schemas/removeHeaderStructure'
      - $ref: '#/components/schemas/removeFooterStructure'
      - $ref: '#/components/schemas/replaceEntriesStructure'
      - $ref: '#/components/schemas/splitRowStructure'
      - $ref: '#/components/schemas/removeInvalidRowsStructure'
      - $ref: '#/components/schemas/removeTrailingColumnStructure'
      - $ref: '#/components/schemas/removeLeadingColumnStructure'
      - $ref: '#/components/schemas/mergeColumnsStructure'
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        name:
          description: |
            A name for the structure.
            This can be used to identify the structure in the UI.
            It can be any string.
          minLength: 1
          type: string
        description:
          description: |
            A description for the structure.
            This can be used to provide more information about the structure in the UI.
            It can be any string.
          minLength: 1
          type: string
      required:
      - converterType
      type: object
    tableStructureSummary:
      description: |
        This is a summary of a table structure.
        It contains am ID, name, and an array of structure summaries.
        However, it does not contain the actual structure with its fields.
      example:
        name: name
        structures:
        - converterType: REMOVE_GROUPED_HEADER
        - converterType: REMOVE_GROUPED_HEADER
        id: 1
      properties:
        id:
          description: The ID of the table structure.
          format: int64
          minimum: 1
          type: integer
        name:
          description: |
            The name of the table structure.
            This is an arbitrary string.
          minLength: 1
          type: string
        structures:
          description: The list of structures in the table structure as summaries.
          items:
            $ref: '#/components/schemas/structureSummary'
          minItems: 0
          type: array
      required:
      - id
      - name
      - structures
      type: object
    structureSummary:
      description: |
        This is a summary of a structure.
        It only contains the converterType to identify the use of the structure.
      example:
        converterType: REMOVE_GROUPED_HEADER
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
      required:
      - converterType
      type: object
    converterType:
      description: This enum is used as a discriminator for structures.
      enum:
      - REMOVE_GROUPED_HEADER
      - FILL_EMPTY_ROW
      - FILL_EMPTY_COLUMN
      - REMOVE_COLUMN_BY_INDEX
      - REMOVE_ROW_BY_INDEX
      - ADD_HEADER_NAME
      - REMOVE_FOOTER
      - REMOVE_HEADER
      - REPLACE_ENTRIES
      - SPLIT_ROW
      - REMOVE_INVALID_ROWS
      - REMOVE_TRAILING_COLUMN
      - REMOVE_LEADING_COLUMN
      - MERGE_COLUMNS
      type: string
      x-field-extra-annotation: '@de.uol.pgdoener.th1.api.validation.ValidConverterType'
    removeRowByIndexStructure:
      description: |
        This converter removes the specified rows from the table.
        If the specified row index is out of bounds, an error will be thrown.

        The converterType MUST be REMOVE_ROW_BY_INDEX.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        rowIndex:
          description: The indices of the rows to remove
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
      required:
      - converterType
      - rowIndex
      type: object
    removeColumnByIndexStructure:
      description: |
        This converter removes the specified columns from the table.
        If the specified column index is out of bounds, an error will be thrown.

        The converterType MUST be REMOVE_COLUMN_BY_INDEX.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        columnIndex:
          description: The indices of the columns to remove
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
      required:
      - columnIndex
      - converterType
      type: object
    removeGroupedHeaderStructure:
      description: |
        This converter restructures the table to remove the grouped header.

        The rowIndex list contains the row indices of the grouped header rows.
        This can be used to describe grouped headers at the top of the table.
        Rows above the grouped header are not allowed, thus the first index in the rowIndex list has to be 0.

        The columnIndex list contains the column indices of the grouped header columns.
        Column indices can be used to describe grouped headers at the left of the table.
        All columns to the left of the lowest column index are removed.

        The properties startRow and startColumn can be used to specify the topmost and leftmost cell data points below and to the left of the grouped header.
        The startRow and startColumn properties are optional and default to below last rowIndex and to the right of the last columnIndex.

        The converterType MUST be REMOVE_GROUPED_HEADER.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        rowIndex:
          description: The indices of the rows that are part of the grouped header
            at the top of the table.
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
        columnIndex:
          description: The indices of the columns that are part of the grouped header
            at the left of the table.
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
        startRow:
          description: The index of the first data row below the grouped header.
          minimum: 0
          type: integer
        startColumn:
          description: The index of the first data column to the right of the grouped
            header.
          minimum: 0
          type: integer
      required:
      - columnIndex
      - converterType
      - rowIndex
      type: object
    addHeaderNameStructure:
      description: |
        This converter replaces the first row of the table with the specified header names.
        If the number of provided header names is less than the number of columns in the table, the remaining columns will not be changed.
        If the number of provided header names is greater than the number of columns in the table, an error will be thrown.

        The converterType MUST be ADD_HEADER_NAME.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        headerNames:
          description: The header names
          example:
          - Name
          - Date of Birth
          items:
            minLength: 1
            type: string
          minItems: 1
          type: array
      required:
      - converterType
      - headerNames
      type: object
    fillEmptyRowStructure:
      description: |
        This converter fills empty cells in the specified rows.
        It iterates through each specified row and fills empty cells with the value from the last non-empty cell.
        If there are no non-empty cells in the row an error will be thrown.
        This converter expects a non-empty cell at the beginning of each specified row.

        The converterType MUST be FILL_EMPTY_ROW.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        rowIndex:
          description: The indices of the rows to fill
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
      required:
      - converterType
      - rowIndex
      type: object
    fillEmptyColumnStructure:
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        columnIndex:
          items:
            minimum: 0
            type: integer
          minItems: 0
          type: array
      required:
      - columnIndex
      - converterType
      type: object
    removeHeaderStructure:
      description: |
        This converter removes the header from the table.
        The header is defined as the first rows of the table which only contain a maximum of threshold invalid values.
        The invalid values are empty cells by default but can be extended using the blockList properties.

        The converterType MUST be REMOVE_HEADER.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        threshold:
          description: The maximum number of invalid values in a row to be considered
            a header row.
          minimum: 0
          type: integer
        blockList:
          description: The list of values to be considered invalid.
          items:
            minLength: 0
            type: string
          minItems: 0
          type: array
      required:
      - converterType
      type: object
    removeFooterStructure:
      description: |
        This converter removes the footer from the table.
        The footer is defined as the last rows of the table which only contain a maximum of threshold invalid values.
        The invalid values are empty cells by default but can be extended using the blockList properties.

        The converterType MUST be REMOVE_FOOTER.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        threshold:
          description: The maximum number of invalid values in a row to be considered
            a footer row.
          minimum: 0
          type: integer
        blockList:
          description: The list of values to be considered invalid.
          items:
            minLength: 0
            type: string
          minItems: 0
          type: array
      required:
      - converterType
      type: object
    replaceEntriesStructure:
      description: |
        This converter replaces entries in the table with the specified replacement value.
        Entries to replace can be selected by specifying either a search string or a regex search string.
        If both search and regexSearch are provided, the search will be used.
        The replacement value will be used to replace the entries.
        This converter only affects the specified area of the table.

        The converterType MUST be REPLACE_ENTRIES.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        search:
          description: The string to search for in the table.
          minLength: 0
          type: string
        regexSearch:
          description: The regex pattern to search for in the table.
          minLength: 1
          type: string
        replacement:
          description: The value to replace the found entries with.
          minLength: 0
          type: string
        startRow:
          description: The start row index of the area to search in (inclusive).
          minimum: 0
          type: integer
        startColumn:
          description: The start column index of the area to search in (inclusive).
          minimum: 0
          type: integer
        endRow:
          description: The end row index of the area to search in (exclusive).
          minimum: 0
          type: integer
        endColumn:
          description: The end column index of the area to search in (exclusive).
          minimum: 0
          type: integer
      required:
      - converterType
      - replacement
      type: object
    splitRowStructure:
      description: |
        This converter splits the entries in the specified column into multiple rows.
        The entries will be split by the specified delimiter.
        The delimiter is a line break by default.
        The new rows will replace the original row.
        If the specified column index is out of bounds, an error will be thrown.
        If the specified delimiter is not found in the entry, the entry will not be split.
        If the specified startRow is greater than the endRow, an error will be thrown.
        If the specified startRow is out of bounds, an error will be thrown.
        If the specified endRow is out of bounds, an error will be thrown.

          The converterType MUST be SPLIT_ROW.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        columnIndex:
          description: The index of the column with the entries to split
          minimum: 0
          type: integer
        delimiter:
          description: |
            The delimiter to split the entries by.
            Line break by default.
          minLength: 1
          type: string
        startRow:
          description: The start row index of the area to split (inclusive).
          minimum: 0
          type: integer
        endRow:
          description: The end row index of the area to split (exclusive).
          minimum: 0
          type: integer
      required:
      - columnIndex
      - converterType
      type: object
    removeInvalidRowsStructure:
      description: |
        This converter removes invalid rows from the table.
        Invalid rows are defined as the rows of the table which only contain a maximum of threshold invalid values.
        The invalid values are empty cells by default but can be extended using the blacklist properties.

        The converterType MUST be REMOVE_INVALID_ROWS.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        threshold:
          description: The maximum number of invalid values in a row to be considered
            invalid.
          minimum: 0
          type: integer
        blockList:
          description: The list of values to be considered invalid.
          items:
            minimum: 0
            type: string
          minItems: 0
          type: array
      required:
      - converterType
      type: object
    removeTrailingColumnStructure:
      description: |
        This converter removes invalid columns from the end of the table.
        The invalid values are empty cells by default but can be extended using the blockList properties.

        The converterType MUST be REMOVE_TRAILING_COLUMN.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        blockList:
          description: The list of values to be considered invalid.
          items:
            minimum: 0
            type: string
          minItems: 0
          type: array
      required:
      - converterType
      type: object
    removeLeadingColumnStructure:
      description: |
        This converter removes invalid columns from the begin of the table.
        The invalid values are empty cells by default but can be extended using the blockList properties.
        The converterType MUST be REMOVE_LEADING_COLUMN.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        blockList:
          description: The list of values to be considered invalid.
          items:
            minimum: 0
            type: string
          minItems: 0
          type: array
      required:
      - converterType
      type: object
    mergeColumnsStructure:
      description: |
        This converter merges the specified columns into a single column.
        The new column will be at the lowest index of the specified columns.
        The new column will have the specified header name.
        If there are multiple non-empty cells in the specified columns, the non-empty cell with the lowest index will be used.
        If you want to change that, you can use the precedenceOrder property.
        The precedenceOrder property specifies the order in which the cells will be checked for non-empty values.
        If not all specified columns are in the precedenceOrder, the remaining columns will be checked after the precedenceOrder.
        If there are indices in the precedenceOrder that are not in the specified columns, an error will the thrown.
        If there are no non-empty cells in the specified columns the cell will be empty.

        The converterType MUST be MERGE_COLUMNS.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        columnIndex:
          description: The indices of the columns to merge
          items:
            minimum: 0
            type: integer
          minItems: 2
          type: array
        headerName:
          description: The name of the new column
          minLength: 1
          type: string
        precedenceOrder:
          description: The order in which the cells will be checked for non-empty
            values
          items:
            minimum: 0
            type: integer
          minItems: 0
          type: array
      required:
      - columnIndex
      - converterType
      - headerName
      type: object
    feedback:
      description: This represents a feedback message.
      properties:
        content:
          description: |
            The content of the feedback message.
            This can be an arbitrary string.
          minLength: 1
          type: string
      required:
      - content
      type: object
    tableStructureGenerationSettings:
      properties:
        removeHeader:
          $ref: '#/components/schemas/removeHeaderSettings'
        removeFooter:
          $ref: '#/components/schemas/removeFooterSettings'
        removeTrailingColumn:
          $ref: '#/components/schemas/removeTrailingColumnSettings'
        removeLeadingColumn:
          $ref: '#/components/schemas/removeLeadingColumnSettings'
        removeInvalidRows:
          $ref: '#/components/schemas/removeInvalidRowsSettings'
        maxIterations:
          default: 5
          minimum: 1
          type: integer
        sumBlockList:
          default:
          - gesamt
          - ges
          - summe
          - sum
          - total
          - totalsumme
          - teilsumme
          - endsumme
          items:
            minLength: 1
            type: string
          type: array
      type: object
    removeHeaderSettings:
      properties:
        enabled:
          default: true
          type: boolean
        threshold:
          minimum: 0
          type: integer
        blockList:
          items:
            minLength: 1
            type: string
          type: array
      required:
      - blockList
      - enabled
      - threshold
      type: object
    removeFooterSettings:
      properties:
        enabled:
          default: true
          type: boolean
        threshold:
          minimum: 0
          type: integer
        blockList:
          items:
            minLength: 1
            type: string
          type: array
      required:
      - blockList
      - enabled
      - threshold
      type: object
    removeColumnsSettings:
      properties:
        enabled:
          default: true
          type: boolean
        blockList:
          items:
            minLength: 1
            type: string
          type: array
      required:
      - blockList
      - enabled
      - threshold
      type: object
    removeLeadingColumnsSettings:
      properties:
        enabled:
          default: true
          type: boolean
        blockList:
          items:
            minLength: 1
            type: string
          type: array
      required:
      - blockList
      - enabled
      type: object
    removeInvalidRowsSettings:
      properties:
        enabled:
          default: false
          type: boolean
        threshold:
          minimum: 0
          type: integer
        blockList:
          items:
            minLength: 1
            type: string
          type: array
      required:
      - blockList
      - enabled
      - threshold
      type: object
    reportType:
      enum:
      - COLUMN_TYPE_MISMATCH
      - GROUPED_HEADER
      - EMPTY_HEADER
      - EMPTY_ROW
      - EMPTY_COLUMN
      - SAME_AS_HEADER
      - MISSING_ENTRY
      - MERGEABLE_COLUMNS
      - SPLIT_ROW
      - SUM
      type: string
      x-field-extra-annotation: '@de.uol.pgdoener.th1.api.validation.ValidReportType'
    report:
      discriminator:
        mapping:
          COLUMN_TYPE_MISMATCH: '#/components/schemas/columnTypeMismatchReport'
          GROUPED_HEADER: '#/components/schemas/groupedHeaderReport'
          EMPTY_HEADER: '#/components/schemas/emptyHeaderReport'
          EMPTY_ROW: '#/components/schemas/emptyRowReport'
          EMPTY_COLUMN: '#/components/schemas/emptyColumnReport'
          SAME_AS_HEADER: '#/components/schemas/sameAsHeaderReport'
          MISSING_ENTRY: '#/components/schemas/missingEntryReport'
          MERGEABLE_COLUMNS: '#/components/schemas/mergeableColumnsReport'
          SPLIT_ROW: '#/components/schemas/splitRowReport'
          SUM: '#/components/schemas/sumReport'
        propertyName: reportType
      example:
        reportType: EMPTY_COLUMN
        columnIndex: 42
      oneOf:
      - $ref: '#/components/schemas/columnTypeMismatchReport'
      - $ref: '#/components/schemas/groupedHeaderReport'
      - $ref: '#/components/schemas/emptyHeaderReport'
      - $ref: '#/components/schemas/emptyRowReport'
      - $ref: '#/components/schemas/emptyColumnReport'
      - $ref: '#/components/schemas/sameAsHeaderReport'
      - $ref: '#/components/schemas/missingEntryReport'
      - $ref: '#/components/schemas/mergeableColumnsReport'
      - $ref: '#/components/schemas/splitRowReport'
      - $ref: '#/components/schemas/sumReport'
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
      required:
      - reportType
      type: object
    columnTypeMismatchReport:
      description: |
        This report indicates that entries in the specified column are not of the same type.
        This excludes the first row as it assumes the first row is a header.

        The reportType MUST be COLUMN_TYPE_MISMATCH.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        mismatches:
          items:
            $ref: '#/components/schemas/columnTypeMismatch'
          type: array
      required:
      - mismatches
      - reportType
      type: object
    columnTypeMismatch:
      description: |
        This is a type mismatch report for a specific column in a table structure.
      properties:
        columnIndex:
          minimum: 0
          type: integer
        replacementSearch:
          description: "If the mismatch can be resolved by replacing a value, this\
            \ field contains the search string."
          type: string
        replacementValue:
          description: "If the mismatch can be resolved by replacing a value, this\
            \ field contains the replacement value."
          type: string
      required:
      - columnIndex
      type: object
    groupedHeaderReport:
      description: |
        This report indicates that the table contains a grouped header.
        The parameters describe the guessed location of the grouped header.

        The reportType MUST be GROUPED_HEADER.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        rowIndex:
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
        columnIndex:
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
        startRow:
          minimum: 0
          type: integer
        startColumn:
          minimum: 0
          type: integer
        rowsToFill:
          items:
            minimum: 0
            type: integer
          minItems: 0
          type: array
        columnsToFill:
          items:
            minimum: 0
            type: integer
          minItems: 0
          type: array
        headerNames:
          items:
            minLength: 1
            type: string
          minItems: 0
          type: array
      required:
      - columnIndex
      - columnsToFill
      - headerNames
      - reportType
      - rowIndex
      - rowsToFill
      - startColumn
      - startRow
      type: object
    emptyHeaderReport:
      description: |
        This report indicates that the specified column header is empty or undefined.
        It is assumed that the first row is the header.

        The reportType MUST be EMPTY_HEADER.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        columnIndex:
          items:
            minimum: 0
            type: integer
          type: array
      required:
      - columnIndex
      - reportType
      type: object
    emptyRowReport:
      description: |
        This report indicates that the specified row is empty.

        The reportType MUST be EMPTY_ROW.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        rowIndex:
          items:
            minimum: 0
            type: integer
          type: array
      required:
      - reportType
      - rowIndex
      type: object
    emptyColumnReport:
      description: |
        This report indicates that the specified column is empty.

        The reportType MUST be EMPTY_COLUMN.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        columnIndex:
          items:
            minimum: 0
            type: integer
          type: array
      required:
      - columnIndex
      - reportType
      type: object
    sameAsHeaderReport:
      description: |
        This report indicates that the specified cell is the same as the header of the column.
        The first row is assumed to be the header.

        The reportType MUST be SAME_AS_HEADER.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        cells:
          items:
            $ref: '#/components/schemas/position'
          type: array
      required:
      - columnIndex
      - reportType
      - rowIndex
      type: object
    missingEntryReport:
      description: |
        This report indicates that the specified cell is empty or undefined.
        This is report is generated if other cells in the same row are not empty.

        The reportType MUST be MISSING_ENTRY.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        cells:
          items:
            $ref: '#/components/schemas/position'
          type: array
      required:
      - columnIndex
      - reportType
      - rowIndex
      type: object
    mergeableColumnsReport:
      description: |
        This report indicates that the specified columns are mergeable.
        This is report is generated if a tuple of columns have entries where other columns in the tuple are empty.

        The reportType MUST be MERGEABLE_COLUMNS.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        mergeables:
          items:
            minimum: 0
            type: integer
          type: array
      required:
      - columnIndex
      - reportType
      type: object
    splitRowReport:
      description: |
        This report indicates that the specified row can be split into multiple rows.

        The reportType MUST be SPLIT_ROW.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        columnIndex:
          minimum: 0
          type: integer
        delimiter:
          type: string
      required:
      - columnIndex
      - delimiter
      - reportType
      type: object
    sumReport:
      description: |
        This report indicates that the specified rows have sum entries and the specified columns have a sum entry at the top.

        The reportType MUST be SUM.
      properties:
        reportType:
          $ref: '#/components/schemas/reportType'
        rowIndex:
          items:
            minimum: 0
            type: integer
          type: array
        columnIndex:
          items:
            minimum: 0
            type: integer
          type: array
      required:
      - columnIndex
      - reportType
      - rowIndex
      type: object
    tableStructureGenerationResponse:
      example:
        reports:
        - reportType: EMPTY_COLUMN
          columnIndex: 42
        - reportType: EMPTY_COLUMN
          columnIndex: 42
        tableStructure:
          id: 1
          name: Table structure 1
          structures:
          - name: Fill Header
            description: Fills empty cells in the header
            converterType: FILL_EMPTY_ROW
            rowIndex:
            - 0
            - 1
          - name: Resolve Grouped Header
            description: Resolves the grouped header
            converterType: REMOVE_GROUPED_HEADER
            rowIndex:
            - 0
            - 1
            columnIndex:
            - 0
            startRow: 3
            startColumn: 0
      properties:
        tableStructure:
          $ref: '#/components/schemas/tableStructure'
        reports:
          items:
            $ref: '#/components/schemas/report'
          type: array
      required:
      - reports
      - tableStructure
      type: object
    position:
      properties:
        rowIndex:
          minimum: 0
          type: integer
        columnIndex:
          minimum: 0
          type: integer
      required:
      - columnIndex
      - rowIndex
      type: object
    removeTrailingColumnSettings:
      properties:
        enabled:
          default: true
          type: boolean
        blockList:
          items:
            minLength: 1
            type: string
          type: array
      required:
      - blockList
      - enabled
      - threshold
      type: object
    removeLeadingColumnSettings:
      properties:
        enabled:
          default: true
          type: boolean
        blockList:
          items:
            minLength: 1
            type: string
          type: array
      required:
      - blockList
      - enabled
      type: object
    generateTableStructure_request:
      properties:
        file:
          format: binary
          type: string
        settings:
          $ref: '#/components/schemas/tableStructureGenerationSettings'
      required:
      - file
      - settings
      type: object
    convertTable_request:
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
    previewConvertTable_request:
      properties:
        file:
          format: binary
          type: string
        tableStructure:
          $ref: '#/components/schemas/tableStructure'
      required:
      - file
      - tableStructure
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
