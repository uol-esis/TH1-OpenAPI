openapi: 3.0.3
info:
  description: TH1
  title: TH1
  version: 1.12.0
servers:
- description: Local server
  url: "http://localhost:{port}/api/v1"
  variables:
    port:
      default: "8080"
- description: Dev server
  url: "http://pg-doener-dev.virt.uni-oldenburg.de:{port}/api/v1"
  variables:
    port:
      default: "8080"
- description: Prod server
  url: "http://pg-doener-prod.virt.uni-oldenburg.de:{port}/api/v1"
  variables:
    port:
      default: "8080"
security:
- BasicAuth: []
paths:
  /table-structures:
    delete:
      operationId: deleteTableStructure
      parameters:
      - in: query
        name: id
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
      summary: Delete table structure by id
    get:
      operationId: getTableStructures
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/tableStructureSummary'
                type: array
          description: OK
        "401":
          description: Unauthorized
      summary: Get all table structures
    post:
      operationId: createTableStructure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tableStructure'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                format: int64
                minimum: 1
                type: integer
          description: Created
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Create a new table structure
  /table-structures/{id}:
    get:
      operationId: getTableStructure
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tableStructure'
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
      summary: Get a table structure by id
  /table-structures/generate:
    post:
      operationId: generateTableStructure
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/generateTableStructure_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tableStructure'
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Generate a tableStructure and return the result as a json
  /converter/{tableStructureId}:
    post:
      operationId: convertTable
      parameters:
      - in: path
        name: tableStructureId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/generateTableStructure_request'
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
      summary: Convert a table and save it to the database
  /converter/preview:
    post:
      operationId: previewConvertTable
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 10
          minimum: 1
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/previewConvertTable_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    type: string
                  type: array
                type: array
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Convert a table and return a preview of the result
  /converter/file:
    post:
      operationId: fileConvertTable
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/previewConvertTable_request'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Convert a table and return the result as a file
  /feedback:
    post:
      operationId: submitFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedback'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                format: int64
                minimum: 1
                type: integer
          description: Created
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Submit feedback
components:
  schemas:
    tableStructure:
      example:
        endColumn: 1
        name: Table structure 1
        structures:
        - name: name
          description: description
          converterType: REMOVE_GROUPED_HEADER
        - name: name
          description: description
          converterType: REMOVE_GROUPED_HEADER
        endRow: 1
        id: 1
      properties:
        id:
          format: int64
          minimum: 1
          type: integer
        name:
          example: Table structure 1
          minLength: 1
          type: string
        structures:
          items:
            $ref: '#/components/schemas/structure'
          minItems: 0
          type: array
        endRow:
          minimum: 1
          type: integer
        endColumn:
          minimum: 1
          type: integer
      required:
      - delimiter
      - name
      - structures
      type: object
    structure:
      discriminator:
        mapping:
          REMOVE_GROUPED_HEADER: '#/components/schemas/removeGroupedHeaderStructure'
          FILL_EMPTY_ROW: '#/components/schemas/fillEmptyRowStructure'
          REMOVE_COLUMN_BY_INDEX: '#/components/schemas/removeColumnByIndexStructure'
          REMOVE_ROW_BY_INDEX: '#/components/schemas/removeRowByIndexStructure'
          ADD_HEADER_NAME: '#/components/schemas/addHeaderNameStructure'
          REMOVE_HEADER: '#/components/schemas/removeHeaderStructure'
          REMOVE_FOOTER: '#/components/schemas/removeFooterStructure'
          REPLACE_ENTRIES: '#/components/schemas/replaceEntriesStructure'
          SPLIT_ROW: '#/components/schemas/splitRowStructure'
          REMOVE_INVALID_ROWS: '#/components/schemas/removeInvalidRowsStructure'
          REMOVE_TRAILING_COLUMN: '#/components/schemas/removeTrailingColumnStructure'
          MERGE_COLUMNS: '#/components/schemas/mergeColumnsStructure'
        propertyName: converterType
      example:
        name: name
        description: description
        converterType: REMOVE_GROUPED_HEADER
      oneOf:
      - $ref: '#/components/schemas/removeRowByIndexStructure'
      - $ref: '#/components/schemas/removeColumnByIndexStructure'
      - $ref: '#/components/schemas/removeGroupedHeaderStructure'
      - $ref: '#/components/schemas/fillEmptyRowStructure'
      - $ref: '#/components/schemas/addHeaderNameStructure'
      - $ref: '#/components/schemas/removeHeaderStructure'
      - $ref: '#/components/schemas/removeFooterStructure'
      - $ref: '#/components/schemas/replaceEntriesStructure'
      - $ref: '#/components/schemas/splitRowStructure'
      - $ref: '#/components/schemas/removeInvalidRowsStructure'
      - $ref: '#/components/schemas/removeTrailingColumnStructure'
      - $ref: '#/components/schemas/mergeColumnsStructure'
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
      type: object
    tableStructureSummary:
      example:
        name: name
        structures:
        - converterType: REMOVE_GROUPED_HEADER
        - converterType: REMOVE_GROUPED_HEADER
        id: 1
      properties:
        id:
          format: int64
          minimum: 1
          type: integer
        name:
          minLength: 1
          type: string
        structures:
          items:
            $ref: '#/components/schemas/structureSummary'
          minItems: 0
          type: array
      required:
      - id
      - name
      - structures
      type: object
    structureSummary:
      example:
        converterType: REMOVE_GROUPED_HEADER
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
      required:
      - converterType
      type: object
    converterType:
      enum:
      - REMOVE_GROUPED_HEADER
      - FILL_EMPTY_ROW
      - REMOVE_COLUMN_BY_INDEX
      - REMOVE_ROW_BY_INDEX
      - ADD_HEADER_NAME
      - REMOVE_FOOTER
      - REMOVE_HEADER
      - REPLACE_ENTRIES
      - SPLIT_ROW
      - REMOVE_INVALID_ROWS
      - REMOVE_TRAILING_COLUMN
      - MERGE_COLUMNS
      type: string
      x-field-extra-annotation: '@de.uol.pgdoener.th1.api.validation.ValidConverterType'
    removeRowByIndexStructure:
      description: |
        This converter removes the specified rows from the table.
        If the specified row index is out of bounds, an error will be thrown.

        The converterType MUST be REMOVE_ROW_BY_INDEX.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        rowIndex:
          description: The indices of the rows to remove
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
      required:
      - converterType
      - rowIndex
      type: object
    removeColumnByIndexStructure:
      description: |
        This converter removes the specified columns from the table.
        If the specified column index is out of bounds, an error will be thrown.

        The converterType MUST be REMOVE_COLUMN_BY_INDEX.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        columnIndex:
          description: The indices of the columns to remove
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
      required:
      - columnIndex
      - converterType
      type: object
    removeGroupedHeaderStructure:
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        rowIndex:
          items:
            minimum: 0
            type: integer
          minItems: 0
          type: array
        columnIndex:
          items:
            minimum: 0
            type: integer
          minItems: 0
          type: array
        startRow:
          minimum: 0
          type: integer
        startColumn:
          minimum: 0
          type: integer
      required:
      - columnIndex
      - converterType
      - rowIndex
      type: object
    addHeaderNameStructure:
      description: |
        This converter replaces the first row of the table with the specified header names.
        If the number of provided header names is less than the number of columns in the table, the remaining columns will not be changed.
        If the number of provided header names is greater than the number of columns in the table, an error will be thrown.

        The converterType MUST be ADD_HEADER_NAME.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        headerNames:
          description: The header names
          example:
          - Name
          - Date of Birth
          items:
            minLength: 1
            type: string
          minItems: 1
          type: array
      required:
      - converterType
      - headerNames
      type: object
    fillEmptyRowStructure:
      description: |
        This converter fills empty cells in the specified rows.
        It iterates through each specified row and fills empty cells with the value from the last non-empty cell.
        If there are no non-empty cells in the row an error will be thrown.
        This converter expects a non-empty cell at the beginning of each specified row.

        The converterType MUST be FILL_EMPTY_ROW.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        rowIndex:
          description: The indices of the rows to fill
          items:
            minimum: 0
            type: integer
          minItems: 1
          type: array
      required:
      - converterType
      - rowIndex
      type: object
    removeHeaderStructure:
      description: |
        This converter removes the header from the table.
        The header is defined as the first rows of the table which only contain a maximum of threshold invalid values.
        The invalid values are empty cells by default but can be extended using the blacklist properties.

        The converterType MUST be REMOVE_HEADER.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        threshold:
          default: 2
          description: The maximum number of invalid values in a row to be considered
            a header row.
          minimum: 0
          type: integer
        blackList:
          description: The list of values to be considered invalid.
          items:
            minLength: 0
            type: string
          minItems: 1
          type: array
      required:
      - converterType
      type: object
    removeFooterStructure:
      description: |
        This converter removes the footer from the table.
        The footer is defined as the last rows of the table which only contain a maximum of threshold invalid values.
        The invalid values are empty cells by default but can be extended using the blacklist properties.

        The converterType MUST be REMOVE_FOOTER.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        threshold:
          default: 2
          description: The maximum number of invalid values in a row to be considered
            a footer row.
          minimum: 0
          type: integer
        blackList:
          description: The list of values to be considered invalid.
          items:
            minLength: 0
            type: string
          minItems: 0
          type: array
      required:
      - converterType
      type: object
    replaceEntriesStructure:
      description: |
        This converter replaces entries in the table with the specified replacement value.
        Entries to replace can be selected by specifying either a search string or a regex search string.
        If both search and regexSearch are provided, the search will be used.
        The replacement value will be used to replace the entries.
        This converter only affects the specified area of the table.

        The converterType MUST be REPLACE_ENTRIES.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        search:
          description: The string to search for in the table.
          minLength: 1
          type: string
        regexSearch:
          description: The regex pattern to search for in the table.
          minLength: 1
          type: string
        replacement:
          description: The value to replace the found entries with.
          minLength: 0
          type: string
        startRow:
          description: The start row index of the area to search in (inclusive).
          minimum: 0
          type: integer
        startColumn:
          description: The start column index of the area to search in (inclusive).
          minimum: 0
          type: integer
        endRow:
          description: The end row index of the area to search in (exclusive).
          minimum: 0
          type: integer
        endColumn:
          description: The end column index of the area to search in (exclusive).
          minimum: 0
          type: integer
      required:
      - converterType
      - replacement
      type: object
    splitRowStructure:
      description: |
        This converter splits the entries in the specified column into multiple rows.
        The entries will be split by the specified delimiter.
        The delimiter is a line break by default.
        The new rows will replace the original row.
        If the specified column index is out of bounds, an error will be thrown.
        If the specified delimiter is not found in the entry, the entry will not be split.
        If the specified startRow is greater than the endRow, an error will be thrown.
        If the specified startRow is out of bounds, an error will be thrown.
        If the specified endRow is out of bounds, an error will be thrown.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        columnIndex:
          description: The index of the column with the entries to split
          minimum: 0
          type: integer
        delimiter:
          description: |
            The delimiter to split the entries by.
            Line break by default.
          minLength: 1
          type: string
        startRow:
          description: The start row index of the area to split (inclusive).
          minimum: 0
          type: integer
        endRow:
          description: The end row index of the area to split (exclusive).
          minimum: 0
          type: integer
      required:
      - columnIndex
      - converterType
      type: object
    removeInvalidRowsStructure:
      description: |
        This converter removes invalid rows from the table.
        Invalid rows are defined as the rows of the table which only contain a maximum of threshold invalid values.
        The invalid values are empty cells by default but can be extended using the blacklist properties.

        The converterType MUST be REMOVE_INVALID_ROWS.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        threshold:
          default: 2
          description: The maximum number of invalid values in a row to be considered
            invalid.
          minimum: 0
          type: integer
        blackList:
          description: The list of values to be considered invalid.
          items:
            minimum: 0
            type: string
          minItems: 0
          type: array
      required:
      - converterType
      type: object
    removeTrailingColumnStructure:
      description: |
        This converter removes invalid columns from the end of the table.
        Invalid columns are defined as the columns of the table which only contain a maximum of threshold invalid values.
        The invalid values are empty cells by default but can be extended using the blacklist properties.

        The converterType MUST be REMOVE_TRAILING_COLUMN.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        threshold:
          description: CURRENTLY NOT IMPLEMENTED BY BACKEND The maximum number of
            invalid values in a column to be considered invalid.
          minimum: 0
          type: integer
        blackList:
          description: The list of values to be considered invalid.
          items:
            minimum: 0
            type: string
          minItems: 0
          type: array
      required:
      - converterType
      type: object
    mergeColumnsStructure:
      description: |
        This converter merges the specified columns into a single column.
        The new column will be at the lowest index of the specified columns.
        The new column will have the specified header name.
        If there are multiple non-empty cells in the specified columns, the non-empty cell with the lowest index will be used.
        If you want to change that, you can use the precedenceOrder property.
        The precedenceOrder property specifies the order in which the cells will be checked for non-empty values.
        If not all specified columns are in the precedenceOrder, the remaining columns will be checked after the precedenceOrder.
        If there are indices in the precedenceOrder that are not in the specified columns, an error will the thrown.
        If there are no non-empty cells in the specified columns the cell will be empty.

        The converterType MUST be MERGE_COLUMNS.
      properties:
        converterType:
          $ref: '#/components/schemas/converterType'
        columnIndex:
          description: The indices of the columns to merge
          items:
            minimum: 0
            type: integer
          minItems: 2
          type: array
        headerName:
          description: The name of the new column
          minLength: 1
          type: string
        precedenceOrder:
          description: The order in which the cells will be checked for non-empty
            values
          items:
            minimum: 0
            type: integer
          minItems: 0
          type: array
      required:
      - columnIndex
      - converterType
      - headerName
      type: object
    feedback:
      properties:
        content:
          minLength: 1
          type: string
      required:
      - content
      type: object
    generateTableStructure_request:
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
    previewConvertTable_request:
      properties:
        file:
          format: binary
          type: string
        tableStructure:
          $ref: '#/components/schemas/tableStructure'
      required:
      - file
      - tableStructure
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
